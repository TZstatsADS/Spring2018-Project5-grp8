packages.used <- c("readxl", "ggplot2", "caret", "reshape2","randomForest",
"xgboost","pROC","e071","InformationValue","devtools")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed,dependencies = TRUE,
repos = 'http://cran.us.r-project.org')
}
library(readxl)
library(ggplot2)
library(caret)
library(reshape2)
library(randomForest)
library(xgboost)
library(pROC)
library(e1071)
library(InformationValue)
library(devtools)
packages.used <- c("readxl", "ggplot2", "caret", "reshape2","randomForest",
"xgboost","pROC","e071","InformationValue","devtools")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed,dependencies = TRUE,
repos = 'http://cran.us.r-project.org')
}
library(readxl)
library(ggplot2)
library(caret)
library(reshape2)
library(randomForest)
library(xgboost)
library(pROC)
library(e1071)
library(InformationValue)
library(devtools)
packages.used <- c("readxl", "ggplot2", "caret", "reshape2","randomForest",
"xgboost","pROC","e071","InformationValue","devtools")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed,dependencies = TRUE,
repos = 'http://cran.us.r-project.org')
}
library(readxl)
library(ggplot2)
library(caret)
library(reshape2)
library(randomForest)
library(xgboost)
library(pROC)
library(e1071)
library(InformationValue)
library(devtools)
packages.used <- c("readxl", "ggplot2", "caret", "reshape2","randomForest",
"xgboost","pROC","e1071","InformationValue","devtools")
# check packages that need to be installed.
packages.needed <- setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed) > 0) {
install.packages(packages.needed,dependencies = TRUE,
repos = 'http://cran.us.r-project.org')
}
library(readxl)
library(ggplot2)
library(caret)
library(reshape2)
library(randomForest)
library(xgboost)
library(pROC)
library(e1071)
library(InformationValue)
library(devtools)
#data <- read_xls("data.xls",sheet = "Data",range = "B1:Y30002")
#data <- data[-1,]
#data <- apply(data,2,as.numeric)
#data <- as.data.frame(data)
#set.seed(04182018)
#test_idx <- sample(1:30000,6000)
#train_idx <- setdiff(1:30000, test_idx)
#train <- data[train_idx,]
#test <- data[test_idx,]
#write.csv(train,"train.csv")
##write.csv(test,"test.csv")
train <- read.csv("train.csv")
#data <- read_xls("data.xls",sheet = "Data",range = "B1:Y30002")
#data <- data[-1,]
#data <- apply(data,2,as.numeric)
#data <- as.data.frame(data)
#set.seed(04182018)
#test_idx <- sample(1:30000,6000)
#train_idx <- setdiff(1:30000, test_idx)
#train <- data[train_idx,]
#test <- data[test_idx,]
#write.csv(train,"train.csv")
##write.csv(test,"test.csv")
train <- read.csv("../data/train.csv")
test <- read.csv("../data/test.csv")
train <- train[,-1]
test <- test[,-1]
run.cv=FALSE # do not run cross-validation on the training set
K <- 5  # number of CV folds
run.test=TRUE # run evaluation on an independent test set
payment.mean <- function(r){
return(mean(r[18:23]))
}
bill.mean <- function(r){
return(mean(r[12:17]))
}
train$X24 <- apply(train,1,bill.mean)# Average bill statement
train$X25 <- apply(train,1,payment.mean) # Average payment
train$X4[which(train$X4!=1)] <- 2 # other marital status merged to unmarried
train$Y <- as.factor(train$Y)
test$X24 <- apply(test,1,bill.mean)# Average bill statement
test$X25 <- apply(test,1,payment.mean) # Average payment
test$X4[which(test$X4!=1)] <- 2 # other marital status merged to unmarried
test$Y <- as.factor(test$Y)
#train_new <- train[,c("X1","X5","X24","X25","Y")]
#test_new <- test[,c("X1","X5","X24","X25","Y")]
#write.csv(train_new,file = "train_new.csv")
#write.csv(test_new,file = "test_new.csv")
source("../lib/train.R")
train$X4[which(train$X4!=1)] <- 2 # Merge unmarried states
test$X4[which(test$X4!=1)] <- 2 # Merge unmarried status
train <- train[,c(1,2,4,5,12:17,18:24)]
test <- test[,c(1,2,4,5,12:17,18:24)]
transform_df <- function(df){
colnames(df) <- c("X1","X2","X4","X5","X12","X13","X14","X15","X16","X17","X18","X19","X20","X21","X22","X23","Y")
df$X2_1 <- ifelse(df$X2==1,1,0)
df$X2_2 <- ifelse(df$X2==2,1,0)
df$X4_1 <- ifelse(df$X4==1,1,0)
df$X4_2 <- ifelse(df$X4==2,1,0)
df <- df[,-c(2:3)]
scaled_df <- scale(df[,-15])
scaled_df <- cbind(scaled_df,df[,15])
colnames(scaled_df)[ncol(scaled_df)] <- "Y"
return(scaled_df)
}
train_scaled <- transform_df(train)
test_scaled <-transform_df(test)
#linear SVM with soft margin
#time_CV_lin <- system.time(
#  tuned_lin <- tune.svm(as.factor(Y)~., data = as.data.frame(train_scaled),
#                      cost = 10^(-4:4), kernel = "linear",
#                      tunecontrol = tune.control(cross = 5)))
#summary(tuned_lin)
#best_par_lin <- tuned_lin$best.parameters
load("./model_linear.rda")
train_scaled <- transform_df(train)
test_scaled <-transform_df(test)
#linear SVM with soft margin
#time_CV_lin <- system.time(
#  tuned_lin <- tune.svm(as.factor(Y)~., data = as.data.frame(train_scaled),
#                      cost = 10^(-4:4), kernel = "linear",
#                      tunecontrol = tune.control(cross = 5)))
#summary(tuned_lin)
#best_par_lin <- tuned_lin$best.parameters
load("../app/model_linear.rda")
model_linear <- svm(as.factor(Y)~.,data = train_scaled,
cost = 0.1,kernel = "linear")
pred_linear <- predict(model_linear,test_scaled[,-ncol(test_scaled)])
table(pred_linear)
err_lin <- mean(pred_linear!=test$Y)
options(warn = -1)
# This is required for the nnet package
dataTestingSample$Y <- as.factor(dataTestingSample$Y)
